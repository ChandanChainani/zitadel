syntax = "proto3";

package zitadel.webkey.v3alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "zitadel/object/v2/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/webkey/v3alpha/config.proto";
import "zitadel/webkey/v3alpha/details.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/webkey/v3alpha";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service";
    version: "3.0-preview";
    description: "This API is intended to manage web keys for a ZITADEL instance, used to sign and validate OIDC tokens. This project is in preview state. It can AND will continue breaking until a stable version is released.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  produces: "application/json";

  consumes: "application/grpc";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$CUSTOM-DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service WebKeyService {
  rpc GenerateWebKey(GenerateWebKeyRequest) returns (GenerateWebKeyResponse) {
    option (google.api.http) = {
      post: "/v3alpha/web_keys"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.write"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Generate a web key pair for the instance";
      description: "Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation. The public key can be used to valite OIDC tokens."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  
  rpc ActivateWebKey(ActivateWebKeyRequest) returns (ActivateWebKeyResponse) {
    option (google.api.http) = {
      post: "/v3alpha/web_keys/{key_id}/activate"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.write"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Activate a signing key for the instance";
      description: "Switch the active signing web key. The previously active key will be deactivated."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  
  rpc DeleteWebKey(DeleteWebKeyRequest) returns (DeleteWebKeyResponse) {
    option (google.api.http) = {
      delete: "/v3alpha/web_keys/{key_id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.delete"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Generate a web key pair for the instance";
      description: "Delete a web key. Only inactive keys can be deleted. Once a key is deleted, any tokens signed by this key will be invalid."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
  
  rpc ListWebKeys(ListWebKeysRequest) returns (ListWebKeysResponse) {
    option (google.api.http) = {
      get: "/v3alpha/web_keys"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "iam.web_key.read"
      }
      http_response: {
        success_code: 200
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Generate a web key pair for the instance";
      description: "List web key details for the instance"
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
}

message GenerateWebKeyRequest {
  // config is optional and defaults to RSA with 2048 bits and the SHA256 hash algorithm.
  oneof config {
    WebKeyRSAConfig rsa = 1;
    WebKeyECDSAConfig ecdsa = 2;
    WebKeyED25519Config ed25519 = 3;
  }
}

message GenerateWebKeyResponse {
  // unique identifier of the web key
  string key_id = 1;
  zitadel.object.v2.Details details = 2;
}

message ActivateWebKeyRequest {
  // unique identifier of the web key
  string key_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message ActivateWebKeyResponse {
  zitadel.object.v2.Details details = 1;
}

message DeleteWebKeyRequest {
  // unique identifier of the web key
  string key_id = 1[
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message DeleteWebKeyResponse {
  zitadel.object.v2.Details details = 1;
}

message ListWebKeysRequest {
  // emtpy request
}

message ListWebKeysResponse {
  repeated WebKeyDetails web_keys = 1;
}